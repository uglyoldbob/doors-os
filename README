DoorsOS version 0.16
	Switched from compile.sh to using make
	Keyboard driver is mostly finished. It could use some customization functions to adjust repeat rates and delays. I also want to make some functions so that "extra" (media keys like volume adjust and similar keys) can be used instead of having their keycodes discarded.
	allocating more than 4KB of memory is functional but slow. It was the first way I thought of to do it that didn't require potentially getting into an infinite loop (I have to allocate memory so I can allocate memory)
	TODO: measure effectiveness of the memory allocation routines

Make all:
	Compiles the kernel if necessary and updates the floppy disk and cd boot images

Make cd:
	Updates the cd boot image and then calls bochs

Make floppy:
	Updates for floppy boot images and the calls bochs
	At the moment, the makefile has to mount a loop back device in order to achieve this
		and that requires root privelages
	Call this as not root, and when the time comes, it will prompt for the password for root access using sudo
	*Don't forget to either change the makefile or create a /mnt/floppy directory if making the floppy disk version

make clean:
	Eliminates all (compiled objects) - object files, the kernel file and the bootable cd image

make test:
	compiles a sample program using the cross compiler with the ported newlib C library
	if this compiles properly, then the cross compiler and C library is probably setup correctly

IMPORTANT for making floppy disk images:
If you want to make a bootable floppy disk image, do not delete Grub.img. If skeleton.img becomes erased or corrupted, then Grub.img is the backup for skeleton.img. The only important thing about these images is that they already have the FAT12 filesystem and GRUB installed on them so only the kernel file (kernel.bin) needs to be copied to them.

Booting from a hard drive.
	This is a pretty easy task if you already have GRUB or some other MULTIBOOT compliant bootloader installed. DoorsOs does not require that it be in a seperate partition at the moment. It will not currently mess anything up when done like shown below. However, disk reading functions will not functions as they only exist for floppy disk at the moment (and not a lot of them at that).

	An example for GRUB:
		title		DoorsOs
		root		(hd0,1)
		kernel		/home/thomas/DoorsOs/FAT12GRUB/kernel.bin

Network boot:
	This is possible, but I don't know how to set this up right now.

Next will be FAT drivers.
I am working on porting newlib. OS dependent calls will probably fail until I have support for them coded.
There will also be tools for compiling a cross compiler. It seems to be sensitive to what is in the folders that the script is run from and things that are in the tools folder. Copying the entire folder tools to a seperate directory to build the cross-compiler seems to solve the problem. I'm not sure what causes this.

v0.17
	Switched over to allow C++ and C code mixed with assembly. This will allow the disk drivers to have a cleaner interface, although in order for disk drivers to be "loadable" (that is, not having to be compiled into the kernel) dynamic linking will have to be supported, although that is probably a given regardless of whether C++ classes are used or not.


-----------
Thomas Epperson
thomas.epperson@gmail.com
