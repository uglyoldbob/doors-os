diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/config.sub /home/thomas/doors-os/tools/newlib-1.15.0.mod/config.sub
--- /home/thomas/doors-os/tools/newlib-1.15.0/config.sub	2006-12-10 22:12:46.000000000 -0600
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/config.sub	2008-09-25 23:30:27.000000000 -0500
@@ -1203,7 +1203,7 @@
 	      | -*vms* | -sco* | -esix* | -isc* | -aix* | -sunos | -sunos[34]*\
 	      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -solaris* | -sym* \
 	      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \
-	      | -aos* \
+	      | -aos* | -doors* \
 	      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \
 	      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \
 	      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/configure.host /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/configure.host
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/configure.host	2006-12-18 15:49:14.000000000 -0600
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/configure.host	2008-09-25 23:31:32.000000000 -0500
@@ -335,6 +335,9 @@
   arc-*-*)
 	sys_dir=arc
 	;;
+  arm-*-doors*)
+	sys_dir=doors
+	;;
   arm-*-*)
 	sys_dir=arm
 	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
@@ -380,6 +383,9 @@
   h8500-*-elf*)
 	sys_dir=h8500hms
 	;;
+  i[34567]86-*-doors*)
+	sys_dir=doors
+	;;
   i[34567]86-*-rdos*)
 	sys_dir=rdos
 	newlib_cflags="${newlib_cflags} -DMISSING_SYSCALL_NAMES"
@@ -475,6 +481,9 @@
   w65-*-*)
 	sys_dir=w65
 	;;
+  xscale-*-doors*)
+	sys_dir=doors
+	;;
   xscale-*-*)
 	sys_dir=arm
 	if [ "x${newlib_may_supply_syscalls}" = "xno" ] ; then
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/configure.in /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/configure.in
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/configure.in	2006-04-13 14:56:27.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/configure.in	2008-09-25 23:34:29.000000000 -0500
@@ -25,6 +25,7 @@
 	arm) AC_CONFIG_SUBDIRS(arm) ;;
 	d10v) AC_CONFIG_SUBDIRS(d10v) ;;
 	decstation) AC_CONFIG_SUBDIRS(decstation) ;;
+	doors) AC_CONFIG_SUBDIRS(doors) ;;
 	h8300hms) AC_CONFIG_SUBDIRS(h8300hms) ;;
 	h8500hms) AC_CONFIG_SUBDIRS(h8500hms) ;;
 	linux) AC_CONFIG_SUBDIRS(linux) ;;
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/configure.in /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/configure.in
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/configure.in	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/configure.in	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,14 @@
+AC_PREREQ(2.59)
+AC_INIT([newlib], [NEWLIB_VERSION])
+AC_CONFIG_SRCDIR([crt0.S])
+case $host in
+    i*86*) DOORS_HOST=X86 ;;
+    arm*)  DOORS_HOST=ARM ;;
+esac
+AM_CONDITIONAL(X86, test x$DOORS_HOST = xX86)
+AM_CONDITIONAL(ARM, test x$DOORS_HOST = xARM)
+AC_SUBST([DOORS_SYSTEM])
+AC_CONFIG_AUX_DIR(../../../..)
+NEWLIB_CONFIGURE(../../..)
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/crt0.S /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/crt0.S
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/crt0.S	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/crt0.S	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,8 @@
+ .global _start
+ .extern main
+ .extern exit
+ _start:
+ call main
+ call exit
+ .wait: hlt
+ jmp .wait
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/Makefile.am /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/Makefile.am
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/Makefile.am	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/Makefile.am	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,44 @@
+## Process this file with automake to generate Makefile.in
+
+AUTOMAKE_OPTIONS = cygnus
+
+INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
+
+AM_CCASFLAGS = $(INCLUDES)
+
+noinst_LIBRARIES = lib.a
+
+if MAY_SUPPLY_SYSCALLS
+if X86
+extra_objs = $(lpfx)syscallsx86.o
+endif
+if ARM
+extra_objs = $(lpfx)syscallsarm.o
+endif
+else
+extra_objs =
+endif
+
+lib_a_SOURCES = 
+lib_a_LIBADD = $(extra_objs)
+EXTRA_lib_a_SOURCES = crt0.S syscallsx86.c syscallsarm.c
+lib_a_DEPENDENCIES = $(extra_objs)
+lib_a_CCASFLAGS = $(AM_CCASFLAGS)
+lib_a_CFLAGS = $(AM_CFLAGS)
+
+if MAY_SUPPLY_SYSCALLS
+all: crt0.o
+endif
+
+if X86
+syscalls.c: syscallsx86.c
+	echo `pwd`
+endif
+
+if ARM
+syscalls.c: syscallsarm.c
+	echo `pwd`
+endif
+
+ACLOCAL_AMFLAGS = -I ../../..
+CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscallsarm.c /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscallsarm.c
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscallsarm.c	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscallsarm.c	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,249 @@
+/* note these headers are all provided by newlib - you don't need to provide them */
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <sys/times.h>
+#include <sys/errno.h>
+#include <sys/time.h>
+#include <stdio.h>
+
+#include <syscalls.h>
+
+#include <errno.h>
+#undef errno
+extern int errno;
+
+/* pointer to array of char * strings that define the current environment variables */
+char *__env[1] = { 0 };
+char **environ = __env;
+
+//1
+void _exit()	
+{	//enter an infinite loop (it's close to exiting...)
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_exit)
+		: "%eax", "%ebx");
+	while (1);
+}
+
+//2
+int close(int file)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_close)
+		: "%eax", "%ebx");
+	errno = ENOTSUP;
+	return -1;
+}
+
+//3
+int execve(char *name, char **argv, char **env)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_execve)
+		: "%eax", "%ebx");
+	errno = ENOMEM;
+	return -1;
+}
+
+//4
+int fork()
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_fork)
+		: "%eax", "%ebx");
+	errno = EAGAIN;
+	return -1;
+}
+
+//5
+int fstat(int file, struct stat *st)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_fstat)
+		: "%eax", "%ebx");
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+
+//6
+int getpid()
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_getpid)
+		: "%eax", "%ebx");
+	return 1;
+}
+
+//7
+int isatty(int file)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_isatty)
+		: "%eax", "%ebx");
+	return 1;
+}
+
+//8
+int kill(int pid, int sig)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_kill)
+		: "%eax", "%ebx");
+	errno = EINVAL;
+	return -1;
+}
+
+//9
+int link(char *old, char *new)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_link)
+		: "%eax", "%ebx");
+	errno = EMLINK;
+	return -1;
+}
+
+//10
+int lseek(int file, int ptr, int dir)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_lseek)
+		: "%eax", "%ebx");
+	return 0;
+}
+
+//11
+int open(const char *name, int flags, ...)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_open)
+		: "%eax", "%ebx");
+	return -1;
+}
+
+//12
+int read(int file, char *ptr, int len)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_read)
+		: "%eax", "%ebx");
+	return 0;
+}
+
+//13
+caddr_t sbrk(int incr)
+{	//doesnt do anything anyways
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_sbrk)
+		: "%eax", "%ebx");
+	
+	errno = ENOMEM;
+	return (caddr_t) -1;
+}
+
+//14
+int stat(const char *file, struct stat *st)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_stat)
+		: "%eax", "%ebx");
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+
+//15
+clock_t times(struct tms *buf)
+{	
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_times)
+		: "%eax", "%ebx");
+	return -1;
+}
+
+//16
+int unlink(char *name)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_unlink)
+		: "%eax", "%ebx");
+	errno = ENOENT;
+	return -1;
+}
+
+//17
+int wait(int *status)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_wait)
+		: "%eax", "%ebx");
+	errno = ECHILD;
+	return -1;
+}
+
+//18
+int write(int file, char *ptr, int len)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_write)
+		: "%eax", "%ebx");
+	errno = ENOTSUP;	//not supported (yet)
+	return -1;
+}
+
+//19
+
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscalls.h /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscalls.h
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscalls.h	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscalls.h	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,23 @@
+//This file defines the function numbers for the system calls.
+//this must match what is found in entrance.asm (line 392)
+#define	SYS_close	1
+#define SYS_execve	2
+#define	SYS_exit	3
+#define SYS_fork	4
+#define SYS_fstat	5
+#define	SYS_getpid	6
+#define SYS_isatty	7
+#define SYS_kill	8
+#define	SYS_link	9
+#define	SYS_lseek	10
+#define	SYS_open	11
+#define	SYS_read	12
+#define SYS_sbrk	13
+#define SYS_stat	14
+#define SYS_time	15
+#define SYS_times	16
+#define	SYS_unlink	17
+#define SYS_wait	18
+#define	SYS_write	19
+
+#define SYS_MAX		20
diff -Naur /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscallsx86.c /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscallsx86.c
--- /home/thomas/doors-os/tools/newlib-1.15.0/newlib/libc/sys/doors/syscallsx86.c	1969-12-31 19:00:00.000000000 -0500
+++ /home/thomas/doors-os/tools/newlib-1.15.0.mod/newlib/libc/sys/doors/syscallsx86.c	2008-09-25 10:10:02.000000000 -0500
@@ -0,0 +1,249 @@
+/* note these headers are all provided by newlib - you don't need to provide them */
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <sys/times.h>
+#include <sys/errno.h>
+#include <sys/time.h>
+#include <stdio.h>
+
+#include <syscalls.h>
+
+#include <errno.h>
+#undef errno
+extern int errno;
+
+/* pointer to array of char * strings that define the current environment variables */
+char *__env[1] = { 0 };
+char **environ = __env;
+
+//1
+void _exit()	
+{	//enter an infinite loop (it's close to exiting...)
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_exit)
+		: "%eax", "%ebx");
+	while (1);
+}
+
+//2
+int close(int file)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_close)
+		: "%eax", "%ebx");
+	errno = ENOTSUP;
+	return -1;
+}
+
+//3
+int execve(char *name, char **argv, char **env)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_execve)
+		: "%eax", "%ebx");
+	errno = ENOMEM;
+	return -1;
+}
+
+//4
+int fork()
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_fork)
+		: "%eax", "%ebx");
+	errno = EAGAIN;
+	return -1;
+}
+
+//5
+int fstat(int file, struct stat *st)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_fstat)
+		: "%eax", "%ebx");
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+
+//6
+int getpid()
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_getpid)
+		: "%eax", "%ebx");
+	return 1;
+}
+
+//7
+int isatty(int file)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_isatty)
+		: "%eax", "%ebx");
+	return 1;
+}
+
+//8
+int kill(int pid, int sig)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_kill)
+		: "%eax", "%ebx");
+	errno = EINVAL;
+	return -1;
+}
+
+//9
+int link(char *old, char *new)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_link)
+		: "%eax", "%ebx");
+	errno = EMLINK;
+	return -1;
+}
+
+//10
+int lseek(int file, int ptr, int dir)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_lseek)
+		: "%eax", "%ebx");
+	return 0;
+}
+
+//11
+int open(const char *name, int flags, ...)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_open)
+		: "%eax", "%ebx");
+	return -1;
+}
+
+//12
+int read(int file, char *ptr, int len)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_read)
+		: "%eax", "%ebx");
+	return 0;
+}
+
+//13
+caddr_t sbrk(int incr)
+{	//doesnt do anything anyways
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_sbrk)
+		: "%eax", "%ebx");
+	
+	errno = ENOMEM;
+	return (caddr_t) -1;
+}
+
+//14
+int stat(const char *file, struct stat *st)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_stat)
+		: "%eax", "%ebx");
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+
+//15
+clock_t times(struct tms *buf)
+{	
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_times)
+		: "%eax", "%ebx");
+	return -1;
+}
+
+//16
+int unlink(char *name)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_unlink)
+		: "%eax", "%ebx");
+	errno = ENOENT;
+	return -1;
+}
+
+//17
+int wait(int *status)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_wait)
+		: "%eax", "%ebx");
+	errno = ECHILD;
+	return -1;
+}
+
+//18
+int write(int file, char *ptr, int len)
+{
+	asm("mov %0,%%eax\n\t"
+		"mov $13,%%ebx\n\t"
+		"int $0x30"
+		:
+		:"g" (SYS_write)
+		: "%eax", "%ebx");
+	errno = ENOTSUP;	//not supported (yet)
+	return -1;
+}
+
+//19
+
